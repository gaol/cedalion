def lookupLastSuccessfulBuildId(String parent_jobname) {
  echo "Fetching last successful build ID of parent job:" + parent_jobname
  def lastSuccessfulBuildId = sh(script:"/var/jenkins_home/fetchLastSuccessfulBuildId.sh ${parent_jobname}", returnStdout: true)
  echo "PARENT JOB LAST SUCCESSFUL BUILD ID: " + lastSuccessfulBuildId
  if ( "${lastSuccessfulBuildId}".equals("0") ) {
    error("Build failed because parent job has never run.")
  }
  return lastSuccessfulBuildId.trim()
}

def determineBuildResult() {
  findText(textFinders: [
    textFinder(regexp: /.INFO. BUILD FAILURE/, alsoCheckConsoleOutput: true, buildResult: 'UNSTABLE', changeCondition: 'MATCH_FOUND'),
    textFinder(regexp: /.INFO. BUILD ERROR/, alsoCheckConsoleOutput: true, buildResult: 'FAILURE', changeCondition: 'MATCH_FOUND')
  ])
}

pipeline {
    agent any

   options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
     }

    parameters {
      string(name: 'RERUN_FAILING_TESTS', defaultValue: '0', description: 'How many time should Maven try to rerun failing tests')
        // -Dhttps.protocols=TLSv1.2 needs to move to Harmonia?
    }

    stages {
        stage('Prep') {
            steps {
                cleanWs()
                dir('hera') {
                  git 'https://github.com/jboss-set/hera.git'
                }
                dir('harmonia') {
                  git branch: 'set-387', url: 'https://github.com/gaol/harmonia.git'
                }
                script {
                    env.BUILD_COMMAND = "testsuite"
                    echo "BUILD_COMMAND:[${env.BUILD_COMMAND}]"
                    env.BUILD_SCRIPT = "${env.WORKSPACE}/hera/build-wrapper.sh"
                    def parent_jobname = "ap-7.4.x-build"
                    def lastSuccessfulBuildId = lookupLastSuccessfulBuildId(parent_jobname)
                    env.PARENT_JOB_VOLUME = "/home/jenkins/jobs/${parent_jobname}/builds/${lastSuccessfulBuildId}/archive"
                    echo "Parent job workspace volume: ${env.PARENT_JOB_VOLUME}"
                }
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
            }
        }
      stage ('Testsuite') {
            steps {
              script {
                try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job"
                } catch (err) {
                  echo "Error during build ${err}"
                }
                junit "**/target/surefire-reports/*.xml"
                determineBuildResult()
              }
            }
        }
    }
    post {
        always {
            script {
             try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
              } catch (err) {
                  echo "Error while deleting container: ${err}"
              }
            }
        }
    }
}
